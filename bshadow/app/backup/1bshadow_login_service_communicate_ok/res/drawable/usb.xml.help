<?xml version="1.0" encoding="utf-8"?>
<!-- 
shape drawable xml文件中定义的一个几何图形，定义在res/drawable/目录下，文件名filename称为访问的资源ID
在代码中通过R.drawable.filename进行访问，在xml文件中通过@[package:]drawable/filename进行访问。
 -->

 <!-- 
  android:shape=["rectangle" | "oval" | "line" | "ring"]
  shape的形状，默认为矩形，可以设置为矩形（rectangle）、椭圆形(oval)、线性形状(line)、环形(ring)
  下面的属性只有在android:shape="ring时可用：
  android:innerRadius 尺寸，内环的半径。
  android:innerRadiusRatio 浮点型，以环的宽度比率来表示内环的半径，
  例如，如果android:innerRadiusRatio，表示内环半径等于环的宽度除以5，这个值是可以被覆盖的，默认为9.
  android:thickness 尺寸，环的厚度
  android:thicknessRatio 浮点型，以环的宽度比率来表示环的厚度，例如，如果android:thicknessRatio="2"，
  那么环的厚度就等于环的宽度除以2。这个值是可以被android:thickness覆盖的，默认值是3.
  android:useLevel boolean值，如果当做是LevelListDrawable使用时值为true，否则为false.
  -->

<shape
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <!--
      圆角
      android:radius   整型 半径
      android:topLeftRadius   整型 左上角半径
      android:topRightRadius   整型 右上角半径
      android:bottomLeftRadius 整型 左下角半径
      android:bottomRightRadius 整型 右下角半径
     -->

     <corners  
        android:radius="8dp"
        android:topLeftRadius="5dp"
        android:topRightRadius="15dp"
        android:bottomLeftRadius="20dp"
        android:bottomRightRadius="25dp"  
        />
     <!--
        渐变色
        android:startColor  颜色值 起始颜色
        android:endColor    颜色值 结束颜色
        android:centerColor 整型   渐变中间颜色，即开始颜色与结束颜色之间的颜色
        android:angle       整型   渐变角度(PS：当angle=0时，渐变色是从左向右。 然后逆时针方向转，当angle=90时为从下往上。angle必须为45的整数倍)
        android:type        ["linear" | "radial" | "sweep"] 渐变类型(取值：linear、radial、sweep)
                            linear 线性渐变，这是默认设置
                            radial 放射性渐变，以开始色为中心。
                            sweep 扫描线式的渐变。
       android:useLevel   ["true" | "false"] 如果要使用LevelListDrawable对象，就要设置为true。设置为true无渐变。false有渐变色
       android:gradientRadius 整型 渐变色半径.当 android:type="radial" 时才使用。单独使用 android:type="radial"会报错。
       android:centerX     整型   渐变中心X点坐标的相对位置
       android:centerY   整型   渐变中心Y点坐标的相对位置
    -->

    <gradient
        android:startColor="#FFFF0000"
        android:endColor="#80FF00FF"
        android:angle="45"
        /> 

    <!--
          内边距，即内容与边的距离 
          android:left   整型 左内边距
          android:top   整型 上内边距
          android:right   整型 右内边距
          android:bottom 整型 下内边距
      -->
     <padding 
         android:left="10dp"
         android:top="10dp"
         android:right="10dp"
         android:bottom="10dp"
         />
    <!-- 
       size 大小
       android:width 整型 宽度
       android:height 整型 高度
    -->
    <size
        android:width="600dp"
        />
    <!--
        内部填充
        android:color 颜色值 填充颜色
    -->
    <solid 
        android:color="#ffff9d77"
        />
     <!--
         描边
         android:width 整型 描边的宽度
         android:color 颜色值 描边的颜色
         android:dashWidth 整型 表示描边的样式是虚线的宽度， 值为0时，表示为实线。值大于0则为虚线。
         android:dashGap   整型 表示描边为虚线时，虚线之间的间隔 即“ - - - - ”
     -->
     <stroke 
        android:width="2dp"
        android:color="#dcdcdc"  
        /> 

</shape>



<!--
Android
RelativeLayout布局 
android:layout_marginTop="25dip" //顶部距离 
android:gravity="left" //空间布局位置 
android:layout_marginLeft="15dip //距离左边距 

// 相对于给定ID控件 
android:layout_above 将该控件的底部置于给定ID的控件之上; 
android:layout_below 将该控件的底部置于给定ID的控件之下; 
android:layout_toLeftOf    将该控件的右边缘与给定ID的控件左边缘对齐; 
android:layout_toRightOf  将该控件的左边缘与给定ID的控件右边缘对齐; 

android:layout_alignBaseline  将该控件的baseline与给定ID的baseline对齐; 
android:layout_alignTop        将该控件的顶部边缘与给定ID的顶部边缘对齐; 
android:layout_alignBottom   将该控件的底部边缘与给定ID的底部边缘对齐; 
android:layout_alignLeft        将该控件的左边缘与给定ID的左边缘对齐; 
android:layout_alignRight      将该控件的右边缘与给定ID的右边缘对齐; 

// 相对于父组件 
android:layout_alignParentTop      如果为true,将该控件的顶部与其父控件的顶部对齐; 
android:layout_alignParentBottom 如果为true,将该控件的底部与其父控件的底部对齐; 
android:layout_alignParentLeft      如果为true,将该控件的左部与其父控件的左部对齐; 
android:layout_alignParentRight    如果为true,将该控件的右部与其父控件的右部对齐; 

// 居中 
android:layout_centerHorizontal 如果为true,将该控件的置于水平居中; 
android:layout_centerVertical     如果为true,将该控件的置于垂直居中; 
android:layout_centerInParent   如果为true,将该控件的置于父控件的中央; 

// 指定移动像素 
android:layout_marginTop      上偏移的值; 
android:layout_marginBottom   下偏移的值; 
android:layout_marginLeft 　　左偏移的值; 
android:layout_marginRight 　 右偏移的值;

续
android:layout_alignParentRight="true" 使当前控件的右端和父控件的右端对齐。这里属性值只能为true或false，默认false。 
android:layout_marginLeft="10dip" 使当前控件左边空出相应的空间。 
android:layout_toLeftOf="@id/ok" 使当前控件置于id为ok的控件的左边。 
android:layout_alignTop="@id/ok" 使当前控件与id控件的上端对齐。 

padding表示填充，margin表示边距 
可通过android:padding属性进行设置，4个方向的边距属性为android:paddingLeft, android:paddingRight, android:paddingTop, and android:paddingBottom. 


结论： 
*android:layout_marginBottom 
*android:layout_marginLeft 
*android:layout_marginRight 
*android:layout_marginTop 
上面几个属性的值是根据下面的相对位置的对象的值来做计算的，如果没有相对的对象就以总体布局来计算 
*android:layout_below 
*android:layout_above 
*android:layout_toLeftOf 
*android:layout_toRightOf 
*android:layout_alignTop 


*android:layout_centerHrizontal          //是否支持横屏或竖屏 
*android:layout_centerVertical             //这个根据单词的意思：中心垂直 
*android:layout_centerInparent         // 
android:layout_centerInParent="true"//居中在父对象 
android:layout_centerInParent="false" ... 浏览器不支持多窗口显示，意思就是说所有页面在单一窗口打开，这样避免了页面布局控制显示问题 
下面的相对于父的相对位置 
*android:layout_alignParentBottom 
*android:layout_alignParentLeft 
*android:layout_alignParentRight 
*android:layout_alignParentTop 
*android:layout_alignWithParentIfMissing 





RelativeLayout用到的一些重要的属性：  

 

    第一类:属性值为true或false 
    android:layout_centerHrizontal  水平居中 
     android:layout_centerVertical   垂直居中 
    android:layout_centerInparent    相对于父元素完全居中 
    android:layout_alignParentBottom 贴紧父元素的下边缘 
    android:layout_alignParentLeft   贴紧父元素的左边缘 
    android:layout_alignParentRight  贴紧父元素的右边缘 
    android:layout_alignParentTop    贴紧父元素的上边缘 
    android:layout_alignWithParentIfMissing  如果对应的兄弟元素找不到的话就以父元素做参照物 

    第二类：属性值必须为id的引用名“@id/id-name” 
    android:layout_below      在某元素的下方 
    android:layout_above      在某元素的的上方 
    android:layout_toLeftOf   在某元素的左边 
    android:layout_toRightOf  在某元素的右边 

    android:layout_alignTop   本元素的上边缘和某元素的的上边缘对齐 
    android:layout_alignLeft  本元素的左边缘和某元素的的左边缘对齐 
    android:layout_alignBottom 本元素的下边缘和某元素的的下边缘对齐 
    android:layout_alignRight  本元素的右边缘和某元素的的右边缘对齐 

    第三类：属性值为具体的像素值，如30dip，40px 
    android:layout_marginBottom              离某元素底边缘的距离 
    android:layout_marginLeft                   离某元素左边缘的距离 
    android:layout_marginRight                 离某元素右边缘的距离 
    android:layout_marginTop                   离某元素上边缘的距离 


EditText的android:hint 

设置EditText为空时输入框内的提示信息。 

android:gravity　 
android:gravity属性是对该view 内容的限定．比如一个button 上面的text.  你可以设置该text 在view的靠左，靠右等位置．以button为例，android:gravity="right"则button上面的文字靠右 

android:layout_gravity 
android:layout_gravity是用来设置该view相对与起父view 的位置．比如一个button 在linearlayout里，你想把该button放在靠左、靠右等位置就可以通过该属性设置．以button为例，android:layout_gravity="right"则button靠右 

android:layout_alignParentRight 
使当前控件的右端和父控件的右端对齐。这里属性值只能为true或false，默认false。 

android:scaleType： 
android:scaleType是控制图片如何resized/moved来匹对ImageView的size。ImageView.ScaleType / android:scaleType值的意义区别： 

CENTER /center  按图片的原来size居中显示，当图片长/宽超过View的长/宽，则截取图片的居中部分显示 

CENTER_CROP / centerCrop  按比例扩大图片的size居中显示，使得图片长(宽)等于或大于View的长(宽) 

CENTER_INSIDE / centerInside  将图片的内容完整居中显示，通过按比例缩小或原来的size使得图片长/宽等于或小于View的长/宽 

FIT_CENTER / fitCenter  把图片按比例扩大/缩小到View的宽度，居中显示 

FIT_END / fitEnd   把图片按比例扩大/缩小到View的宽度，显示在View的下部分位置 

FIT_START / fitStart  把图片按比例扩大/缩小到View的宽度，显示在View的上部分位置 

FIT_XY / fitXY  把图片不按比例扩大/缩小到View的大小显示 

MATRIX / matrix 用矩阵来绘制，动态缩小放大图片来显示。 

** 要注意一点，Drawable文件夹里面的图片命名是不能大写的。



-->

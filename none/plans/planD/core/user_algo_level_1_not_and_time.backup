#include <stdio.h>
#include <stdlib.h>

#include "user_algo.h"

#include "none_matrix.h"
#include "none_config.h"
#include "none_core.h"
#include "none_utils.h"

#define TRIGGER_INTERVAL      (YUAN_FEEDBACK_TICKS)


unsigned char right[1000]={0};
unsigned char wrong[1000]={0};


void exit_for_debug(int32_t c) {

    static int ex = -1;
    static int ex_ticks = -1;

    if(c > 900 && ex == -1) {
        ex = 0;
        ex_ticks=param->ticks + 1000*1000;
    }
    if(ex == 0 && ex_ticks < param->ticks) {
        printf("\n\tTrigger exit condition!!\n");
        exit(0);
    }

}


void write_debug_to_file() {
    char args[64]={0};

    sprintf(args, "echo %d %d >> cw.txt", user_get_correct_percent(), user_get_wrong_percent());
    system(args);
}

static int32_t input_value_at_ticks() {

    int32_t value;
    if(param->ticks%TRIGGER_INTERVAL == 0) {
        value = YUAN_FULLHOLD;
    } else {
        value = 0;
    }
    return value;
}

static int32_t output_at_ticks() {

    if(param->ticks%TRIGGER_INTERVAL == 6) {
        return 1;
    } else {
        return 0;
    }
}


int32_t user_input_algo_func(struct yuan_t *matrix) {
    int32_t i;

    for(i=0; i<YUAN_NUM_OF_INPUT; i++) {
        matrix[YUAN_IDX_OF_INPUT_S+i].sum = input_value_at_ticks();
    }
   return 0;
}

//statistics idx   : 1, 2, 3, 4,  5,  6,   7,   8,   9,   10
int idx_value[10] = {0, 2, 5, 10, 20, 50, 100, 150, 200, 300};
unsigned short t1[10], t2[10], t3[10], t4[10];
unsigned int   fb_1=0, fb_2=0, fb_3=0, fb_4=0;
unsigned short latest_c=0, latest_w=0;

int get_statistics_debug() {

    int i;
    printf("\n\tT1 idx:\t");
    for(i=0; i<10; i++) {
        printf("%d\t", idx_value[i]);
    }
    printf("\n");

    printf("\tT1 val:\t");
    for(i=0; i<10; i++) {
        printf("%d\t", t1[i]);
    }
    printf("\n");
    printf("\tT2 val:\t");
    for(i=0; i<10; i++) {
        printf("%d\t", t2[i]);
    }
    printf("\n");

    printf("\tT3 val:\t");
    for(i=0; i<10; i++) {
        printf("%d\t", t3[i]);
    }
    printf("\n");

    printf("\tT4 val:\t");
    for(i=0; i<10; i++) {
        printf("%d\t", t4[i]);
    }
    printf("\n");

}

int get_fb_from_statistics(unsigned short *t) {
    
    unsigned int r;
    int i;
    int sum=0;
    get_random((int8_t *)&r, sizeof(r));
    
    for(i=0; i<10; i++) {
        sum += t[i];
    }
    r %= sum;
    for(i=0; i<10; i++) {
        if(r < t[i]) {
            break;
        }
        r -= t[i];
    }
    
    return i;
}

int adjust_output_statistic(unsigned short *t) {
    
    int i;
    unsigned short max = 0;

    for(i=0; i<10; i++) {
        max = max < t[i] ? t[i] : max;
    }

    if(max > 0xFFFF-1000) {
        for(i=0; i<10; i++) {
            t[i] = t[i]/2+100;
        }
    }
    if(max < 0xFFFF/3) {
        for(i=0; i<10; i++) {
            t[i] = t[i]*2;
        }
    }

    return 0;
  
}

int init_output_statistics() {
    int i, j;
    for(i=0; i<10; i++) {
        t1[i]= 0x7FFF;
        t2[i]= 0x7FFF;
        t3[i]= 0x7FFF;
        t4[i]= 0x7FFF;
    }
    
    fb_1 =  get_fb_from_statistics(t1);
    fb_2 =  get_fb_from_statistics(t2);
    fb_3 =  get_fb_from_statistics(t3);
    fb_4 =  get_fb_from_statistics(t4);


}

int adjust_output_statistics() {
    
    int tmp;
    int c = user_get_correct_percent()/10-50; // - latest_c;
    int w = user_get_wrong_percent()/10-50;// - latest_w;


    adjust_output_statistic(t1);
    adjust_output_statistic(t2);
    adjust_output_statistic(t3);
    adjust_output_statistic(t4);
    
    tmp = t1[fb_1] + c;
    t1[fb_1] = tmp>100 ? tmp : 100;
    tmp = t2[fb_2] + c;
    t2[fb_2] = tmp>100 ? tmp : 100;
    tmp = t3[fb_3] - w;
    t3[fb_3] = tmp>100 ? tmp : 100;
    tmp = t4[fb_4] - w;
    t4[fb_4] = tmp>100 ? tmp : 100;

    fb_1 =  get_fb_from_statistics(t1);
    fb_2 =  get_fb_from_statistics(t2);
    fb_3 =  get_fb_from_statistics(t3);
    fb_4 =  get_fb_from_statistics(t4);

    return 0;
}

int32_t user_output_algo_func(struct yuan_t *matrix) {
    
    int32_t i;
    long value = 0;
    
    for(i=0; i<YUAN_NUM_OF_OUTPUT; i++) {
        value+=matrix[YUAN_IDX_OF_OUTPUT_S+i].sum;
    }
    value/=YUAN_NUM_OF_OUTPUT;

    //clear co
    param->fb_latest_co = 0;

#if 0
    if(param->ticks%(10*10000)==0)
    {
        adjust_output_statistics();
    }

    if(value >= YUAN_THRESHOLD && output_at_ticks()) {
        param->fb_latest_co = idx_value[fb_1]; 
    }
    
    if(value < YUAN_THRESHOLD && output_at_ticks()) {
        param->fb_latest_co = -idx_value[fb_2]; 
    }

    if(value >= YUAN_THRESHOLD && !output_at_ticks()) {
        param->fb_latest_co = -idx_value[fb_3];
    }
    
    if(value < YUAN_THRESHOLD && !output_at_ticks()) {
        param->fb_latest_co = idx_value[fb_4];
    }

#endif


#if 1
    int c = user_get_correct_percent();
    int w = user_get_wrong_percent();

    if(value >= YUAN_THRESHOLD && output_at_ticks()) {

        
        param->fb_latest_co = (long)10*(1001-c)*(1001-c)/(w+1);
        param->fb_latest_co = param->fb_latest_co > 10000 ? 10000 : param->fb_latest_co;
    }
    if(value >= YUAN_THRESHOLD && !output_at_ticks()) {

        param->fb_latest_co = -w-1;
    }
    
    exit_for_debug(c);

    //param->fb_latest_co -= 1;

#endif


#if 0
    if(value >= YUAN_THRESHOLD && output_at_ticks()) {
        param->fb_latest_co = 1000/(user_get_correct_percent()+1);
    }
    
#if 1
    if(value < YUAN_THRESHOLD && output_at_ticks()) {
        param->fb_latest_co = -1000/(1001-user_get_correct_percent());
    }
#endif

    if(value >= YUAN_THRESHOLD && !output_at_ticks()) {
        param->fb_latest_co = -1000/(1001-user_get_wrong_percent())/10;
    }
    
#if 1
    if(value < YUAN_THRESHOLD && !output_at_ticks()) {
        param->fb_latest_co = 1000/(user_get_wrong_percent()+1)/10;
    }
#endif

    //param->fb_latest_co -= 1;

#endif

#if 0
    if(value > YUAN_THRESHOLD && output_at_ticks()) {
        param->fb_latest_co = (1000-user_get_correct_percent())/10;
    } else if(value > YUAN_THRESHOLD && !output_at_ticks()) {
        param->fb_latest_co = -user_get_wrong_percent()/10-1;
    } else {
        param->fb_latest_co = -(1000-user_get_correct_percent())/100;
    }
#endif

#if 1
    if(output_at_ticks() ) {
        if (value >= YUAN_THRESHOLD) {
            right[param->ticks/10%1000]=1;
        } else {
            right[param->ticks/10%1000]=0;
        }
    } else {
        if (value >= YUAN_THRESHOLD) {
            wrong[param->ticks/10%1000]=1;
        } else {
            wrong[param->ticks/10%1000]=0;
        }
    }

    if(param->ticks%10000==0) {
        write_debug_to_file();
    }
#endif

    return 0;
}


int32_t user_get_correct_percent() {

    int ret=0, i;
    for(i=0; i<1000; i++) {
       ret += right[i];
    }
    return ret;
}

int32_t user_get_wrong_percent() {

    int ret=0, i;
    for(i=0; i<1000; i++) {
       ret += wrong[i];
    }
    return ret*9;
}

